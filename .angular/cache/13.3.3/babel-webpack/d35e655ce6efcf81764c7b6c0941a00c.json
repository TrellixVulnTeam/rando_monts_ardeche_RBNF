{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@app/services/offline-treks/offline-treks.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@ngx-translate/core\";\n\nfunction SelectTrekComponent_ion_list_6_ion_item_5_ion_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-img\", 9);\n    i0.ɵɵlistener(\"ionError\", function SelectTrekComponent_ion_list_6_ion_item_5_ion_img_2_Template_ion_img_ionError_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const i_r3 = i0.ɵɵnextContext().index;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.onImgPracticeSrcError(i_r3);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    const trek_r2 = ctx_r8.$implicit;\n    const i_r3 = ctx_r8.index;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"background-color\", trek_r2.imgPractice.color ? trek_r2.imgPractice.color : \"transparent\");\n    i0.ɵɵproperty(\"src\", ctx_r4.imgPractices[i_r3].src);\n  }\n}\n\nfunction SelectTrekComponent_ion_list_6_ion_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\");\n    i0.ɵɵelement(1, \"ion-radio\", 6);\n    i0.ɵɵtemplate(2, SelectTrekComponent_ion_list_6_ion_item_5_ion_img_2_Template, 1, 3, \"ion-img\", 7);\n    i0.ɵɵelementStart(3, \"ion-label\", 8);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const trek_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", trek_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", trek_r2.imgPractice.src && !ctx_r1.imgPractices[i_r3].hideImgPracticeSrc);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(trek_r2.name);\n  }\n}\n\nfunction SelectTrekComponent_ion_list_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-list\")(1, \"ion-radio-group\", 4);\n    i0.ɵɵlistener(\"ionChange\", function SelectTrekComponent_ion_list_6_Template_ion_radio_group_ionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.selectedTrekChange($event);\n    });\n    i0.ɵɵelementStart(2, \"ion-list-header\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, SelectTrekComponent_ion_list_6_ion_item_5_Template, 5, 3, \"ion-item\", 5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r0.selectedTrekId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 3, \"mapTreks.treksAlert.informUser\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.radioTreks);\n  }\n}\n\nexport let SelectTrekComponent = /*#__PURE__*/(() => {\n  class SelectTrekComponent {\n    constructor(modalController, offlineTreks) {\n      this.modalController = modalController;\n      this.offlineTreks = offlineTreks;\n      this.baseUrl = environment.onlineBaseUrl;\n      this.imgPractices = [];\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.selectedTrekId = this.radioTreks[0].id;\n\n        for (const radioTrek of this.radioTreks) {\n          this.imgPractices.push(Object.assign(Object.assign({}, radioTrek.imgPractice), {\n            src: yield this.offlineTreks.getTrekImageSrc({}, {\n              url: radioTrek.imgPractice.src\n            }),\n            firstTryToLoadFromOnline: true,\n            hideImgPracticeSrc: false\n          }));\n        }\n      });\n    }\n\n    cancel() {\n      this.modalController.dismiss();\n    }\n\n    select() {\n      this.modalController.dismiss({\n        selectedTrekId: this.selectedTrekId\n      });\n    }\n\n    selectedTrekChange(evt) {\n      this.selectedTrekId = evt.detail.value;\n    }\n\n    onImgPracticeSrcError(i) {\n      if (this.imgPractices[i].src && this.imgPractices[i].firstTryToLoadFromOnline) {\n        this.imgPractices[i].firstTryToLoadFromOnline = false;\n        this.imgPractices[i].src = `${this.baseUrl}${this.imgPractices[i].src}`;\n      } else {\n        this.imgPractices[i].hideImgPracticeSrc = true;\n      }\n    }\n\n  }\n\n  SelectTrekComponent.ɵfac = function SelectTrekComponent_Factory(t) {\n    return new (t || SelectTrekComponent)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i2.OfflineTreksService));\n  };\n\n  SelectTrekComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SelectTrekComponent,\n    selectors: [[\"app-select-trek\"]],\n    inputs: {\n      radioTreks: \"radioTreks\"\n    },\n    decls: 16,\n    vars: 10,\n    consts: [[\"color\", \"primary\"], [4, \"ngIf\"], [\"slot\", \"end\"], [\"color\", \"primary\", \"fill\", \"clear\", 3, \"click\"], [3, \"value\", \"ionChange\"], [4, \"ngFor\", \"ngForOf\"], [\"slot\", \"start\", 3, \"value\"], [\"style\", \"width: 24px; height: 24px; margin-right: 12px\", 3, \"background-color\", \"src\", \"ionError\", 4, \"ngIf\"], [1, \"ion-text-wrap\"], [2, \"width\", \"24px\", \"height\", \"24px\", \"margin-right\", \"12px\", 3, \"src\", \"ionError\"]],\n    template: function SelectTrekComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-title\");\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"translate\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(5, \"ion-content\");\n        i0.ɵɵtemplate(6, SelectTrekComponent_ion_list_6_Template, 6, 5, \"ion-list\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-footer\")(8, \"ion-toolbar\")(9, \"ion-buttons\", 2)(10, \"ion-button\", 3);\n        i0.ɵɵlistener(\"click\", function SelectTrekComponent_Template_ion_button_click_10_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"ion-button\", 3);\n        i0.ɵɵlistener(\"click\", function SelectTrekComponent_Template_ion_button_click_13_listener() {\n          return ctx.select();\n        });\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 4, \"mapTreks.treksAlert.title\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.imgPractices.length === ctx.radioTreks.length);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(12, 6, \"mapTreks.treksAlert.cancelButton\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 8, \"mapTreks.treksAlert.confirmButton\"), \" \");\n      }\n    },\n    directives: [i1.IonHeader, i1.IonToolbar, i1.IonTitle, i1.IonContent, i3.NgIf, i1.IonList, i1.IonRadioGroup, i1.SelectValueAccessor, i1.IonListHeader, i3.NgForOf, i1.IonItem, i1.IonRadio, i1.RadioValueAccessor, i1.IonImg, i1.IonLabel, i1.IonFooter, i1.IonButtons, i1.IonButton],\n    pipes: [i4.TranslatePipe],\n    styles: [\"\"]\n  });\n  return SelectTrekComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}