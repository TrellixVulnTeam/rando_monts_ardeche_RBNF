{"ast":null,"code":"import _asyncToGenerator from \"/Users/macintosh/Dev/Geotrek/rando-monts-ardeche/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n  constructor() {\n    var _this;\n\n    super();\n    _this = this;\n\n    /**\n     * Perform an Http request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    this.request = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (options) {\n        return Request.request(options);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http GET request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.get = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (options) {\n        return Request.get(options);\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http POST request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.post = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (options) {\n        return Request.post(options);\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http PUT request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.put = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (options) {\n        return Request.put(options);\n      });\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http PATCH request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.patch = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (options) {\n        return Request.patch(options);\n      });\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    /**\n     * Perform an Http DELETE request given a set of options\n     * @param options Options to build the HTTP request\n     */\n\n\n    this.del = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (options) {\n        return Request.del(options);\n      });\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n    /**\n     * Gets all HttpCookies as a Map\n     */\n\n\n    this.getCookiesMap = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(function* ( // @ts-ignore\n      options) {\n        const cookies = Cookie.getCookies();\n        const output = {};\n\n        for (const cookie of cookies) {\n          output[cookie.key] = cookie.value;\n        }\n\n        return output;\n      });\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n    /**\n     * Get all HttpCookies as an object with the values as an HttpCookie[]\n     */\n\n\n    this.getCookies = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(function* (options) {\n        // @ts-ignore\n        const {\n          url\n        } = options;\n        const cookies = Cookie.getCookies();\n        return {\n          cookies\n        };\n      });\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n    /**\n     * Set a cookie\n     * @param key The key to set\n     * @param value The value to set\n     * @param options Optional additional parameters\n     */\n\n\n    this.setCookie = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator(function* (options) {\n        const {\n          key,\n          value,\n          expires = '',\n          path = ''\n        } = options;\n        Cookie.setCookie(key, value, {\n          expires,\n          path\n        });\n      });\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n    /**\n     * Gets all cookie values unless a key is specified, then return only that value\n     * @param key The key of the cookie value to get\n     */\n\n\n    this.getCookie = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator(function* (options) {\n        return Cookie.getCookie(options.key);\n      });\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n    /**\n     * Deletes a cookie given a key\n     * @param key The key of the cookie to delete\n     */\n\n\n    this.deleteCookie = /*#__PURE__*/function () {\n      var _ref11 = _asyncToGenerator(function* (options) {\n        return Cookie.deleteCookie(options.key);\n      });\n\n      return function (_x11) {\n        return _ref11.apply(this, arguments);\n      };\n    }();\n    /**\n     * Clears out cookies by setting them to expire immediately\n     */\n\n\n    this.clearCookies = /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator(function* ( // @ts-ignore\n      options) {\n        return Cookie.clearCookies();\n      });\n\n      return function (_x12) {\n        return _ref12.apply(this, arguments);\n      };\n    }();\n    /**\n     * Clears out cookies by setting them to expire immediately\n     */\n\n\n    this.clearAllCookies = /*#__PURE__*/_asyncToGenerator(function* () {\n      return Cookie.clearCookies();\n    });\n    /**\n     * Uploads a file through a POST request\n     * @param options TODO\n     */\n\n    this.uploadFile = /*#__PURE__*/function () {\n      var _ref14 = _asyncToGenerator(function* (options) {\n        const formData = new FormData();\n        formData.append(options.name, options.blob || 'undefined');\n        const fetchOptions = Object.assign(Object.assign({}, options), {\n          body: formData,\n          method: 'POST'\n        });\n        return _this.post(fetchOptions);\n      });\n\n      return function (_x13) {\n        return _ref14.apply(this, arguments);\n      };\n    }();\n    /**\n     * Downloads a file\n     * @param options TODO\n     */\n\n\n    this.downloadFile = /*#__PURE__*/function () {\n      var _ref15 = _asyncToGenerator(function* (options) {\n        const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n        const response = yield fetch(options.url, requestInit);\n        let blob;\n        if (!(options === null || options === void 0 ? void 0 : options.progress)) blob = yield response.blob();else if (!(response === null || response === void 0 ? void 0 : response.body)) blob = new Blob();else {\n          const reader = response.body.getReader();\n          let bytes = 0;\n          let chunks = [];\n          const contentType = response.headers.get('content-type');\n          const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n\n          while (true) {\n            const {\n              done,\n              value\n            } = yield reader.read();\n            if (done) break;\n            chunks.push(value);\n            bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n            const status = {\n              type: 'DOWNLOAD',\n              url: options.url,\n              bytes,\n              contentLength\n            };\n\n            _this.notifyListeners('progress', status);\n          }\n\n          let allChunks = new Uint8Array(bytes);\n          let position = 0;\n\n          for (const chunk of chunks) {\n            if (typeof chunk === 'undefined') continue;\n            allChunks.set(chunk, position);\n            position += chunk.length;\n          }\n\n          blob = new Blob([allChunks.buffer], {\n            type: contentType || undefined\n          });\n        }\n        return {\n          blob\n        };\n      });\n\n      return function (_x14) {\n        return _ref15.apply(this, arguments);\n      };\n    }();\n  }\n\n} //# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module"}