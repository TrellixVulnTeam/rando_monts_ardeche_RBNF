{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { Storage } from '@capacitor/storage';\nimport { environment } from '@env/environment';\nimport { cloneDeep } from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@app/services/filter-treks/filter-treks.service\";\nimport * as i3 from \"@ngx-translate/core\";\nexport let OnlineTreksService = /*#__PURE__*/(() => {\n  class OnlineTreksService {\n    constructor(http, filterTreks, translate) {\n      this.http = http;\n      this.filterTreks = filterTreks;\n      this.translate = translate;\n      this.offline = false;\n      this.baseUrl = environment.onlineBaseUrl;\n      this.treks$ = new BehaviorSubject(null);\n      this.onlineTreksError$ = new BehaviorSubject(false);\n    }\n\n    loadTreks() {\n      return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n        this.filteredTreks$ = this.filterTreks.getFilteredTreks(this.treks$);\n        this.getTreks().subscribe({\n          next: value => __awaiter(this, void 0, void 0, function* () {\n            this.onlineTreksError$.next(false);\n            yield Storage.set({\n              key: 'treks',\n              value: JSON.stringify(value)\n            });\n            this.treks$.next(value);\n            resolve(true);\n          }),\n          error: () => __awaiter(this, void 0, void 0, function* () {\n            const treks = yield this.getTreksFromStorage();\n\n            if (treks) {\n              this.onlineTreksError$.next(false);\n              this.treks$.next(treks);\n            } else {\n              this.onlineTreksError$.next(true);\n            }\n\n            resolve(true);\n          })\n        });\n      }));\n    }\n\n    getTreksFromStorage() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const treks = JSON.parse((yield Storage.get({\n          key: `treks`\n        })).value);\n        return treks;\n      });\n    }\n\n    getTrekImageSrc(trek, picture) {\n      if (picture || trek.properties.first_picture) {\n        return this.baseUrl + (!!picture ? picture.url : trek.properties.first_picture.url);\n      }\n\n      return '';\n    }\n\n    getCommonImgSrc() {\n      return this.baseUrl;\n    }\n\n    getTreksUrl() {\n      return '/tabs/treks';\n    }\n\n    getTrekDetailsUrl(trekId, parentId) {\n      return !parentId ? `/trek-details/${trekId}` : `/trek-details/${parentId}/${trekId}`;\n    }\n\n    getTrekMapUrl(trekId, parentId) {\n      return !parentId ? `/map/${trekId}` : `/map/${parentId}/${trekId}`;\n    }\n\n    getTreksMapUrl() {\n      return `/treks-map/`;\n    }\n\n    getTreks() {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Accept-Language': this.translate.getDefaultLang()\n        })\n      };\n      return this.http.get(`${this.baseUrl}/treks.geojson`, httpOptions);\n    }\n\n    getTrekById(trekId, parentId) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Accept-Language': this.translate.getDefaultLang()\n        })\n      };\n\n      if (parentId) {\n        return this.http.get(`${this.baseUrl}/${parentId}/treks/${trekId}.geojson`, httpOptions);\n      } else {\n        return this.http.get(`${this.baseUrl}/${trekId}/trek.geojson`, httpOptions);\n      }\n    }\n\n    getPoisForTrekById(trekId, parentId) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Accept-Language': this.translate.getDefaultLang()\n        })\n      };\n\n      if (parentId) {\n        return this.http.get(`${this.baseUrl}/${parentId}/pois/${trekId}.geojson`, httpOptions);\n      } else {\n        return this.http.get(`${this.baseUrl}/${trekId}/pois.geojson`, httpOptions);\n      }\n    }\n\n    getTouristicContentsForTrekById(trekId, parentId) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Accept-Language': this.translate.getDefaultLang()\n        })\n      };\n\n      if (parentId) {\n        return this.http.get(`${this.baseUrl}/${parentId}/touristic_contents/${trekId}.geojson`, httpOptions);\n      } else {\n        return this.http.get(`${this.baseUrl}/${trekId}/touristic_contents.geojson`, httpOptions);\n      }\n    }\n\n    getTouristicEventsForTrekById(trekId, parentId) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Accept-Language': this.translate.getDefaultLang()\n        })\n      };\n\n      if (parentId) {\n        return this.http.get(`${this.baseUrl}/${parentId}/touristic_events/${trekId}.geojson`, httpOptions);\n      } else {\n        return this.http.get(`${this.baseUrl}/${trekId}/touristic_events.geojson`, httpOptions);\n      }\n    }\n\n    getMinimalTrekById(trekId) {\n      const trek = this.treks$.getValue();\n\n      if (!!trek) {\n        return trek.features.find(feature => feature.properties.id === trekId);\n      } else {\n        return undefined;\n      }\n    }\n\n    getMapConfigForTrekById(trek) {\n      const mapConfig = Object.assign(Object.assign({}, cloneDeep(environment.onlineMapConfig)), {\n        zoom: environment.trekZoom.zoom\n      });\n      mapConfig.trekBounds = trek.bbox;\n      mapConfig.center = undefined;\n      return mapConfig;\n    }\n\n  }\n\n  OnlineTreksService.ɵfac = function OnlineTreksService_Factory(t) {\n    return new (t || OnlineTreksService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FilterTreksService), i0.ɵɵinject(i3.TranslateService));\n  };\n\n  OnlineTreksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OnlineTreksService,\n    factory: OnlineTreksService.ɵfac,\n    providedIn: 'root'\n  });\n  return OnlineTreksService;\n})();","map":null,"metadata":{},"sourceType":"module"}