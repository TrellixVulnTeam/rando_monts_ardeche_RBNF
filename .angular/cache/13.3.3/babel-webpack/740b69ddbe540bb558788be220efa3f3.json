{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/services/offline-treks/offline-treks.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/common\";\n\nfunction FilterValueComponent_ion_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-img\", 3);\n    i0.ɵɵlistener(\"ionError\", function FilterValueComponent_ion_img_1_Template_ion_img_ionError_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.onImgPracticeSrcError();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.value.color ? ctx_r0.value.color : \"transparent\");\n    i0.ɵɵproperty(\"src\", ctx_r0.imgPracticeSrc);\n  }\n}\n\nexport let FilterValueComponent = /*#__PURE__*/(() => {\n  class FilterValueComponent {\n    constructor(offlineTreks) {\n      this.offlineTreks = offlineTreks;\n      this.valueChange = new EventEmitter();\n      this.firstTryToLoadFromOnline = true;\n      this.hideImgPracticeSrc = false;\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.imgPracticeSrc = yield this.offlineTreks.getTrekImageSrc({}, {\n          url: this.value.pictogram\n        });\n      });\n    }\n\n    valueCheckChanged($event, value) {\n      this.valueChange.emit({\n        checked: $event.detail.checked,\n        value: value\n      });\n    }\n\n    onImgPracticeSrcError() {\n      if (this.value.pictogram && this.firstTryToLoadFromOnline) {\n        this.firstTryToLoadFromOnline = false;\n        this.imgPracticeSrc = this.commonSrc + this.value.pictogram;\n      } else {\n        this.hideImgPracticeSrc = true;\n      }\n    }\n\n  }\n\n  FilterValueComponent.ɵfac = function FilterValueComponent_Factory(t) {\n    return new (t || FilterValueComponent)(i0.ɵɵdirectiveInject(i1.OfflineTreksService));\n  };\n\n  FilterValueComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FilterValueComponent,\n    selectors: [[\"app-filter-value\"]],\n    inputs: {\n      value: \"value\",\n      commonSrc: \"commonSrc\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"no-lines\"], [\"style\", \"width: 24px; height: 24px; margin-right: 12px\", 3, \"background-color\", \"src\", \"ionError\", 4, \"ngIf\"], [\"slot\", \"start\", 3, \"checked\", \"ionChange\"], [2, \"width\", \"24px\", \"height\", \"24px\", \"margin-right\", \"12px\", 3, \"src\", \"ionError\"]],\n    template: function FilterValueComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-item\", 0);\n        i0.ɵɵtemplate(1, FilterValueComponent_ion_img_1_Template, 1, 3, \"ion-img\", 1);\n        i0.ɵɵelementStart(2, \"ion-label\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-checkbox\", 2);\n        i0.ɵɵlistener(\"ionChange\", function FilterValueComponent_Template_ion_checkbox_ionChange_4_listener($event) {\n          return ctx.valueCheckChanged($event, ctx.value);\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.value.pictogram && !ctx.hideImgPracticeSrc);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.value.name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"checked\", ctx.value.checked);\n      }\n    },\n    directives: [i2.IonItem, i3.NgIf, i2.IonImg, i2.IonLabel, i2.IonCheckbox, i2.BooleanValueAccessor],\n    styles: [\".no-lines[_ngcontent-%COMP%]{--inner-border-width: 0px}\"]\n  });\n  return FilterValueComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}