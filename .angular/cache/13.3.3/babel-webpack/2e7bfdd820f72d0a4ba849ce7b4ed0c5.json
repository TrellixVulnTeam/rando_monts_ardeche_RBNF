{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { point } from '@turf/helpers';\nimport distance from '@turf/distance';\nimport { LocalNotifications } from '@capacitor/local-notifications';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@app/services/geolocate/geolocate.service\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@angular/common\";\n\nfunction GeolocateNotificationsComponent_ion_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-button\", 1);\n    i0.ɵɵlistener(\"click\", function GeolocateNotificationsComponent_ion_button_0_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.changeNotificationsMode();\n    });\n    i0.ɵɵelement(1, \"ion-icon\", 2);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"mapTrek.enableNotification\"), \"\\n\");\n  }\n}\n\nfunction GeolocateNotificationsComponent_ion_button_1_ion_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 4);\n  }\n}\n\nfunction GeolocateNotificationsComponent_ion_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-button\", 1);\n    i0.ɵɵlistener(\"click\", function GeolocateNotificationsComponent_ion_button_1_Template_ion_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.changeNotificationsMode();\n    });\n    i0.ɵɵtemplate(1, GeolocateNotificationsComponent_ion_button_1_ion_icon_1_Template, 1, 0, \"ion-icon\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.notificationsModeIsActive);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 2, \"mapTrek.disableNotification\"), \"\\n\");\n  }\n}\n\nexport let GeolocateNotificationsComponent = /*#__PURE__*/(() => {\n  class GeolocateNotificationsComponent {\n    constructor(platform, alertController, geolocate, translate) {\n      this.platform = platform;\n      this.alertController = alertController;\n      this.geolocate = geolocate;\n      this.translate = translate;\n      this.currentPoisToNotify = [];\n      this.notificationsModeIsActive = false;\n      this.presentPoiDetails = new EventEmitter();\n    }\n\n    ngOnInit() {\n      LocalNotifications.addListener('localNotificationActionPerformed', localNotificationAction => {\n        const poi = this.currentPois.features.find(feature => feature.properties.id === localNotificationAction.notification.id);\n        this.presentPoiDetails.emit(poi);\n      });\n    }\n\n    ngOnChanges(changes) {\n      const changesCurrentPois = changes.currentPois;\n\n      if (changesCurrentPois.currentValue && !changesCurrentPois.previousValue) {\n        if (this.currentPois && Array.isArray(this.currentPois.features)) {\n          this.currentPoisToNotify = this.currentPois.features.map(feature => ({\n            id: feature.properties.id,\n            name: feature.properties.name,\n            coordinates: feature.geometry.coordinates\n          }));\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      LocalNotifications.removeAllListeners();\n\n      if (this.currentPosition$) {\n        this.disableGeolocationNotification();\n      }\n    }\n\n    changeNotificationsMode() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this.notificationsModeIsActive) {\n          if (this.platform.is('ios') || this.platform.is('android')) {\n            if ((yield LocalNotifications.checkPermissions()).display === 'granted') {\n              this.notificationsModeIsActive = true;\n              this.enableGeolocationNotification();\n            } else {\n              yield LocalNotifications.requestPermissions();\n            }\n          }\n        } else {\n          this.notificationsModeIsActive = false;\n          this.disableGeolocationNotification();\n        }\n      });\n    }\n\n    enableGeolocationNotification() {\n      this.currentPosition$ = this.geolocate.currentPosition$.subscribe(location => this.checkToNotify([location.longitude, location.latitude]));\n    }\n\n    disableGeolocationNotification() {\n      this.currentPosition$.unsubscribe();\n    }\n\n    checkToNotify(fromCoordinates) {\n      if (fromCoordinates && this.currentPoisToNotify && this.currentPoisToNotify.length > 0) {\n        const kmToNotify = environment.metersToNotify / 1000;\n        const options = {\n          units: 'kilometers'\n        };\n        const from = point(fromCoordinates);\n        const notifiedIndex = this.currentPoisToNotify.findIndex(feature => distance(from, point(feature.coordinates), options) <= kmToNotify);\n\n        if (notifiedIndex !== -1) {\n          if (this.platform.is('ios') || this.platform.is('android')) {\n            this.translate.get('geolocate.poiNearBy').subscribe(trad => {\n              LocalNotifications.schedule({\n                notifications: [{\n                  id: this.currentPoisToNotify[notifiedIndex].id,\n                  title: trad,\n                  body: this.currentPoisToNotify[notifiedIndex].name,\n                  extra: {\n                    id: this.currentPoisToNotify[notifiedIndex].id\n                  }\n                }]\n              });\n              this.currentPoisToNotify.splice(notifiedIndex, 1);\n            });\n          }\n        }\n      }\n    }\n\n  }\n\n  GeolocateNotificationsComponent.ɵfac = function GeolocateNotificationsComponent_Factory(t) {\n    return new (t || GeolocateNotificationsComponent)(i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i1.AlertController), i0.ɵɵdirectiveInject(i2.GeolocateService), i0.ɵɵdirectiveInject(i3.TranslateService));\n  };\n\n  GeolocateNotificationsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GeolocateNotificationsComponent,\n    selectors: [[\"app-geolocate-notifications\"]],\n    inputs: {\n      currentPois: \"currentPois\",\n      trekName: \"trekName\"\n    },\n    outputs: {\n      presentPoiDetails: \"presentPoiDetails\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"expand\", \"full\", 3, \"click\", 4, \"ngIf\"], [\"expand\", \"full\", 3, \"click\"], [\"color\", \"white\", \"slot\", \"start\", \"name\", \"notifications\"], [\"color\", \"white\", \"slot\", \"start\", \"name\", \"notifications-off\", 4, \"ngIf\"], [\"color\", \"white\", \"slot\", \"start\", \"name\", \"notifications-off\"]],\n    template: function GeolocateNotificationsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, GeolocateNotificationsComponent_ion_button_0_Template, 4, 3, \"ion-button\", 0);\n        i0.ɵɵtemplate(1, GeolocateNotificationsComponent_ion_button_1_Template, 4, 4, \"ion-button\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.notificationsModeIsActive);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.notificationsModeIsActive);\n      }\n    },\n    directives: [i4.NgIf, i1.IonButton, i1.IonIcon],\n    pipes: [i3.TranslatePipe],\n    styles: [\"\"]\n  });\n  return GeolocateNotificationsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}