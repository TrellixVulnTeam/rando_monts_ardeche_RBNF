{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { Storage } from '@capacitor/storage';\nimport { Device } from '@capacitor/device';\nimport { BehaviorSubject } from 'rxjs';\nimport { cloneDeep } from 'lodash';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@ngx-translate/core\";\nexport let SettingsService = /*#__PURE__*/(() => {\n  class SettingsService {\n    constructor(http, platform, translate) {\n      this.http = http;\n      this.platform = platform;\n      this.translate = translate;\n      this.baseUrl = environment.onlineBaseUrl;\n      this.filters$ = new BehaviorSubject(null);\n      this.order$ = new BehaviorSubject(null);\n      this.userLocation$ = new BehaviorSubject([0, 0]);\n      this.data$ = new BehaviorSubject(null);\n      this.settingsError$ = new BehaviorSubject(false);\n    }\n\n    initializeSettings() {\n      return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n        this.platform.ready().then(() => __awaiter(this, void 0, void 0, function* () {\n          let defaultLanguage;\n\n          if (this.platform.is('ios') || this.platform.is('android')) {\n            defaultLanguage = (yield Device.getLanguageCode()).value;\n          } else {\n            defaultLanguage = navigator.language.slice(0, 2);\n          }\n\n          if (environment.availableLanguage && environment.availableLanguage.length > 0) {\n            if (environment.availableLanguage.indexOf(defaultLanguage) === -1) {\n              defaultLanguage = environment.availableLanguage[0];\n            }\n          } else {\n            defaultLanguage = 'fr';\n          }\n\n          this.translate.setDefaultLang(defaultLanguage);\n          yield this.loadSettings();\n          resolve(true);\n        }));\n      }));\n    }\n\n    loadSettings() {\n      return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n        this.getSettings().subscribe({\n          next: value => __awaiter(this, void 0, void 0, function* () {\n            this.settingsError$.next(false);\n            yield Storage.set({\n              key: 'settings',\n              value: JSON.stringify(value)\n            });\n            this.filters$.next(this.getFilters(value));\n            this.data$.next(value.data);\n            resolve(true);\n          }),\n          error: () => __awaiter(this, void 0, void 0, function* () {\n            const settings = yield this.getSettingsFromStorage();\n\n            if (settings) {\n              this.settingsError$.next(false);\n              this.filters$.next(this.getFilters(settings));\n              this.data$.next(settings.data);\n            } else {\n              this.settingsError$.next(true);\n            }\n\n            resolve(true);\n          })\n        });\n        this.getZoneFromUrl().subscribe({\n          next: value => __awaiter(this, void 0, void 0, function* () {\n            yield Storage.set({\n              key: 'zone',\n              value: JSON.stringify(value)\n            });\n          }),\n          error: () => {\n            return true;\n          }\n        });\n      }));\n    }\n\n    getSettingsFromStorage() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const defaultSettings = JSON.parse((yield Storage.get({\n          key: `settings`\n        })).value);\n        return defaultSettings;\n      });\n    }\n\n    getFilters(settings) {\n      const filters = [];\n\n      if (settings && settings.filters && settings.data) {\n        settings.filters.forEach(filter => {\n          const currentDataSetting = settings.data.find(data => data.id === filter.id);\n\n          if (currentDataSetting) {\n            filter = Object.assign(Object.assign(Object.assign({}, filter), currentDataSetting), {\n              values: []\n            });\n            filter.values = currentDataSetting.values.map(value => Object.assign(Object.assign({}, value), {\n              checked: false\n            }));\n            filters.push(filter);\n          }\n        });\n      }\n\n      return filters;\n    }\n\n    getSettings() {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Accept-Language': this.translate.getDefaultLang()\n        })\n      };\n      return this.http.get(this.baseUrl + '/settings.json', httpOptions);\n    }\n\n    getZoneFromUrl() {\n      return this.http.get(this.baseUrl + '/contour/contour.geojson');\n    }\n\n    getZoneFromStorage() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const zone = JSON.parse((yield Storage.get({\n          key: 'zone'\n        })).value);\n        return zone ? zone : {\n          type: 'FeatureCollection',\n          features: []\n        };\n      });\n    }\n\n    saveFiltersState(filters) {\n      this.filters$.next(filters);\n    }\n\n    saveOrderState(order, geolocation) {\n      this.order$.next({\n        type: order,\n        value: geolocation\n      });\n    }\n\n    resetFilters() {\n      let filters = cloneDeep(this.filters$.getValue());\n\n      if (!!filters) {\n        filters.forEach(filter => {\n          filter.values.forEach(value => value.checked = false);\n        });\n      } else {\n        filters = [];\n      }\n\n      this.saveFiltersState(filters);\n    }\n\n    getValueForPropertyById(propertyName, id) {\n      const dataSetting = this.data$.getValue();\n\n      if (dataSetting) {\n        const property = dataSetting.find(data => data.id === propertyName);\n\n        if (property) {\n          const propertyValue = property.values.find(value => value.id === id);\n\n          if (propertyValue) {\n            return propertyValue;\n          } else {\n            return {\n              id: -1,\n              name: ''\n            };\n          }\n        }\n      }\n\n      return {\n        id: -1,\n        name: ''\n      };\n    }\n\n    getHydratedTrek(trek, commonSrc) {\n      const hydratedTrek = cloneDeep(trek);\n\n      if (trek.properties.difficulty) {\n        hydratedTrek.properties.difficulty = this.getValueForPropertyById('difficulty', trek.properties.difficulty);\n      }\n\n      if (trek.properties.practice) {\n        hydratedTrek.properties.practice = this.getValueForPropertyById('practice', trek.properties.practice);\n      }\n\n      if (trek.properties.route) {\n        hydratedTrek.properties.route = this.getValueForPropertyById('route', trek.properties.route);\n      }\n\n      if (trek.properties.departure_city) {\n        hydratedTrek.properties.departure_city = this.getValueForPropertyById('cities', trek.properties.departure_city);\n      }\n\n      if (trek.properties.arrival_city) {\n        hydratedTrek.properties.arrival_city = this.getValueForPropertyById('cities', trek.properties.arrival_city);\n      }\n\n      if (trek.properties.cities) {\n        hydratedTrek.properties.cities = trek.properties.cities.map(city => this.getValueForPropertyById('cities', city));\n      }\n\n      if (trek.properties.networks) {\n        hydratedTrek.properties.networks = trek.properties.networks.map(network => this.getValueForPropertyById('networks', network));\n      }\n\n      if (trek.properties.themes) {\n        hydratedTrek.properties.themes = trek.properties.themes.map(theme => this.getValueForPropertyById('themes', theme));\n      }\n\n      if (trek.properties.information_desks) {\n        hydratedTrek.properties.information_desks.forEach(information_desk => {\n          information_desk.type = this.getValueForPropertyById('information_desk_types', information_desk.type);\n        });\n      }\n\n      const regexp = new RegExp(`src=\"${this.baseUrl}`, 'gi');\n\n      if (trek.properties.description) {\n        hydratedTrek.properties.description = trek.properties.description.replace(regexp, 'src=\"').replace(/src\\=\\\"\\//gi, `src=\"${commonSrc}/`);\n      }\n\n      if (trek.properties.advice) {\n        hydratedTrek.properties.advice = trek.properties.advice.replace(regexp, 'src=\"').replace(/src\\=\\\"\\//gi, `src=\"${commonSrc}/`);\n      }\n\n      return hydratedTrek;\n    }\n\n    getTouristicCategoriesWithFeatures(touristicContents) {\n      const touristicCategoriesWithFeatures = [];\n\n      if (touristicContents && Array.isArray(touristicContents.features)) {\n        const categories = touristicContents.features.map(touristicContent => touristicContent.properties.category).filter((v, i, a) => a.indexOf(v) === i);\n        categories.forEach(categoryId => {\n          const category = this.getValueForPropertyById('touristiccontent_categories', categoryId);\n          touristicCategoriesWithFeatures.push({\n            id: categoryId,\n            name: category ? category.name : '',\n            features: touristicContents.features.filter(touristicContent => touristicContent.properties.category === categoryId)\n          });\n        });\n      }\n\n      return touristicCategoriesWithFeatures;\n    }\n\n  }\n\n  SettingsService.ɵfac = function SettingsService_Factory(t) {\n    return new (t || SettingsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(i3.TranslateService));\n  };\n\n  SettingsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingsService,\n    factory: SettingsService.ɵfac,\n    providedIn: 'root'\n  });\n  return SettingsService;\n})();","map":null,"metadata":{},"sourceType":"module"}