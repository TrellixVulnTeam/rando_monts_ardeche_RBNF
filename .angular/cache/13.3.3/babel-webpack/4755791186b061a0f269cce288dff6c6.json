{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { InAppDisclosureComponent } from '@app/components/in-app-disclosure/in-app-disclosure.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@app/services/settings/settings.service\";\nimport * as i3 from \"@app/services/geolocate/geolocate.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ngx-translate/core\";\n\nfunction TreksOrderComponent_ion_item_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-item\", 3)(1, \"ion-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-radio\", 4);\n    i0.ɵɵlistener(\"click\", function TreksOrderComponent_ion_item_6_Template_ion_radio_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const order_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.treksOrderChange(order_r1.value);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const order_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(order_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", order_r1.value);\n  }\n}\n\nexport let TreksOrderComponent = /*#__PURE__*/(() => {\n  class TreksOrderComponent {\n    constructor(navParams, settings, platform, popoverController, modalController, geolocate) {\n      this.navParams = navParams;\n      this.settings = settings;\n      this.platform = platform;\n      this.popoverController = popoverController;\n      this.modalController = modalController;\n      this.geolocate = geolocate;\n      this.isFirstCheck = true;\n    }\n\n    ngOnInit() {\n      this.orders = this.navParams.get('orders');\n      this.orderSubscription = this.settings.order$.subscribe(order => {\n        this.currentOrder = order.type;\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.orderSubscription) {\n        this.orderSubscription.unsubscribe();\n      }\n    }\n\n    treksOrderChange(orderValue) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let error = false;\n\n        if (orderValue === 'location') {\n          if (this.platform.is('ios') || this.platform.is('android')) {\n            let startLocation;\n\n            try {\n              const shouldShowInAppDisclosure = yield this.geolocate.shouldShowInAppDisclosure();\n\n              if (shouldShowInAppDisclosure) {\n                yield this.presentInAppDisclosure();\n              }\n\n              startLocation = yield this.geolocate.getCurrentPosition();\n            } catch (catchError) {\n              error = true;\n            }\n\n            if (startLocation) {\n              this.settings.saveOrderState(orderValue, [startLocation.longitude, startLocation.latitude]);\n            } else {\n              error = true;\n            }\n\n            yield this.popoverController.dismiss({\n              error\n            });\n          } else if ('geolocation' in navigator) {\n            const shouldShowInAppDisclosure = yield this.geolocate.shouldShowInAppDisclosure();\n\n            if (shouldShowInAppDisclosure) {\n              yield this.presentInAppDisclosure();\n            }\n\n            navigator.geolocation.getCurrentPosition(position => __awaiter(this, void 0, void 0, function* () {\n              this.settings.saveOrderState(orderValue, [position.coords.longitude, position.coords.latitude]);\n              yield this.popoverController.dismiss();\n            }), () => __awaiter(this, void 0, void 0, function* () {\n              yield this.popoverController.dismiss({\n                error: true\n              });\n            }));\n          }\n        } else if (orderValue === 'alphabetical') {\n          this.settings.saveOrderState(orderValue);\n          yield this.popoverController.dismiss();\n        } else if (orderValue === 'random') {\n          this.settings.saveOrderState(orderValue);\n          yield this.popoverController.dismiss();\n        }\n      });\n    }\n\n    presentInAppDisclosure() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const modal = yield this.modalController.create({\n          component: InAppDisclosureComponent,\n          componentProps: {},\n          cssClass: 'full-size'\n        });\n        yield modal.present();\n        yield modal.onDidDismiss();\n      });\n    }\n\n  }\n\n  TreksOrderComponent.ɵfac = function TreksOrderComponent_Factory(t) {\n    return new (t || TreksOrderComponent)(i0.ɵɵdirectiveInject(i1.NavParams), i0.ɵɵdirectiveInject(i2.SettingsService), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i1.PopoverController), i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i3.GeolocateService));\n  };\n\n  TreksOrderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TreksOrderComponent,\n    selectors: [[\"app-treks-order\"]],\n    decls: 7,\n    vars: 5,\n    consts: [[\"lines\", \"inset\"], [3, \"value\"], [\"class\", \"no-lines\", 4, \"ngFor\", \"ngForOf\"], [1, \"no-lines\"], [\"slot\", \"end\", 3, \"value\", \"click\"]],\n    template: function TreksOrderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-list\", 0)(1, \"ion-radio-group\", 1)(2, \"ion-list-header\")(3, \"ion-label\");\n        i0.ɵɵtext(4);\n        i0.ɵɵpipe(5, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, TreksOrderComponent_ion_item_6_Template, 4, 2, \"ion-item\", 2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.currentOrder);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 3, \"toolbar.orderTitle\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.orders);\n      }\n    },\n    directives: [i1.IonList, i1.IonRadioGroup, i1.SelectValueAccessor, i1.IonListHeader, i1.IonLabel, i4.NgForOf, i1.IonItem, i1.IonRadio, i1.RadioValueAccessor],\n    pipes: [i5.TranslatePipe],\n    styles: [\".no-lines[_ngcontent-%COMP%]{--inner-border-width: 0px}\"]\n  });\n  return TreksOrderComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}