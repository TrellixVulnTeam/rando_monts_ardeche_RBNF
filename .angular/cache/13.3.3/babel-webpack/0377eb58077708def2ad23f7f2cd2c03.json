{"ast":null,"code":"import _asyncToGenerator from \"/Users/macintosh/Dev/Geotrek/rando-monts-ardeche/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n\n        resolve(base64StringWithoutTags);\n      };\n\n      reader.onerror = error => reject(error);\n\n      reader.readAsDataURL(blob);\n    });\n  });\n\n  return function readBlobAsBase64(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\n\nexport const encode = str => encodeURIComponent(str).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\n\nexport const decode = str => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent); //# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module"}