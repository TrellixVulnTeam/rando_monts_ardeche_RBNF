{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject } from 'rxjs';\nimport { registerPlugin } from '@capacitor/core';\nimport { Storage } from '@capacitor/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@ngx-translate/core\";\nimport * as i3 from \"@awesome-cordova-plugins/device-orientation/ngx\";\nconst BackgroundGeolocation = registerPlugin('BackgroundGeolocation');\nexport let GeolocateService = /*#__PURE__*/(() => {\n  class GeolocateService {\n    constructor(platform, translate, deviceOrientation) {\n      this.platform = platform;\n      this.translate = translate;\n      this.deviceOrientation = deviceOrientation;\n      this.currentPosition$ = new BehaviorSubject(null);\n      this.currentHeading$ = new BehaviorSubject(null);\n      this.currentWatchId = null;\n    }\n\n    shouldShowInAppDisclosure() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alreadyAskGeolocationPermission = yield Storage.get({\n          key: 'alreadyAskGeolocationPermission'\n        });\n        return !!!alreadyAskGeolocationPermission.value;\n      });\n    }\n\n    checkIfCanGetCurrentHeading() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const deviceOrientation = yield new Promise(resolve => {\n          this.deviceOrientation.getCurrentHeading().then(data => resolve(data), () => resolve(null));\n        });\n        return !!deviceOrientation;\n      });\n    }\n\n    startOnMapTracking() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.platform.is('ios') || this.platform.is('android')) {\n          const notificationTitle = yield this.translate.get('geolocate.notificationTitle').toPromise();\n          BackgroundGeolocation.addWatcher({\n            backgroundTitle: notificationTitle,\n            requestPermissions: true,\n            stale: false,\n            distanceFilter: 2\n          }, location => {\n            this.currentPosition$.next(location);\n          }).then(watcher_id => {\n            this.currentWatchId = watcher_id;\n            this.deviceOrientationSubscription = this.deviceOrientation.watchHeading({\n              frequency: 200\n            }).subscribe(data => this.currentHeading$.next(data.magneticHeading));\n          });\n        }\n      });\n    }\n\n    stopOnMapTracking() {\n      if (this.platform.is('ios') || this.platform.is('android')) {\n        if (this.deviceOrientationSubscription) {\n          this.deviceOrientationSubscription.unsubscribe();\n        }\n\n        if (this.currentWatchId) {\n          BackgroundGeolocation.removeWatcher({\n            id: this.currentWatchId\n          }).then(() => {\n            this.currentWatchId = null;\n          });\n        }\n      }\n    }\n\n    getCurrentPosition() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resolve => __awaiter(this, void 0, void 0, function* () {\n          if (this.platform.is('ios') || this.platform.is('android')) {\n            let last_location;\n            BackgroundGeolocation.addWatcher({\n              requestPermissions: true,\n              stale: true\n            }, location => {\n              last_location = location || null;\n            }).then(id => {\n              setTimeout(() => {\n                resolve(last_location);\n                BackgroundGeolocation.removeWatcher({\n                  id\n                });\n              }, 500);\n            });\n          } else {\n            resolve(null);\n          }\n        }));\n      });\n    }\n\n  }\n\n  GeolocateService.ɵfac = function GeolocateService_Factory(t) {\n    return new (t || GeolocateService)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.DeviceOrientation));\n  };\n\n  GeolocateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GeolocateService,\n    factory: GeolocateService.ɵfac,\n    providedIn: 'root'\n  });\n  return GeolocateService;\n})();","map":null,"metadata":{},"sourceType":"module"}