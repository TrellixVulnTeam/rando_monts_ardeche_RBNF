{"ast":null,"code":"import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\n\nexport const setCookie = (key, value, options = {}) => {\n  // Safely Encoded Key/Value\n  const encodedKey = encode(key);\n  const encodedValue = encode(value); // Clean & sanitize options\n\n  const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n\n  const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n\n  document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\n\nexport const getCookies = () => {\n  const output = [];\n  const map = {};\n\n  if (!document.cookie) {\n    return output;\n  }\n\n  const cookies = document.cookie.split(';') || [];\n\n  for (const cookie of cookies) {\n    // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n    let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n    k = decode(k).trim();\n    v = decode(v).trim();\n    map[k] = v;\n  }\n\n  const entries = Object.entries(map);\n\n  for (const [key, value] of entries) {\n    output.push({\n      key,\n      value\n    });\n  }\n\n  return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\n\nexport const getCookie = key => {\n  const cookies = getCookies();\n\n  for (const cookie of cookies) {\n    if (cookie.key === key) {\n      return cookie;\n    }\n  }\n\n  return {\n    key,\n    value: ''\n  };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\n\nexport const deleteCookie = key => {\n  document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\n\nexport const clearCookies = () => {\n  const cookies = document.cookie.split(';') || [];\n\n  for (const cookie of cookies) {\n    document.cookie = cookie.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n  }\n}; //# sourceMappingURL=cookie.js.map","map":null,"metadata":{},"sourceType":"module"}